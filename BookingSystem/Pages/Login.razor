@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@inject ILocalStorageService LocalStorage

<h3>Login</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText id="email" @bind-Value="loginModel.Email" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText type="password" id="password" @bind-Value="loginModel.Password" class="form-control" />
        <ValidationMessage For="@(() => loginModel.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @errorMessage
        </div>
    }
</EditForm>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task HandleLogin()
    {
        errorMessage = null;
        var token = await AuthService.Login(loginModel.Email, loginModel.Password);

        if (token != null)
        {
            var authStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
            await authStateProvider.MarkUserAsAuthenticated(token);
            NavigationManager.NavigateTo("/");
        }
        else
        {
            errorMessage = "Invalid email or password";
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;
    }
} 